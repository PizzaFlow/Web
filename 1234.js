class ApiClient {
    constructor(baseURL = 'http://localhost:8000') {
      this.baseURL = baseURL;
      this.token = localStorage.getItem('authToken') || null;
      this.pizzas = [];
      this.ingredients = [];
      this.favoritePizzas = [];
      this.pizzaIngredients = [];
      this.addresses = [];
      this.orders = [];
      this.selectedAddress = null;
      this.currentOrder = null;
      this.currentUser = null;
      this.fetchAddresses(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤, –∫–∞–∫ –≤ Swift
    }
  
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    async request(endpoint, method = 'GET', body = null, headers = {}) {
      const url = `${this.baseURL}${endpoint}`;
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        body: body ? JSON.stringify(body) : null,
      };
  
      if (this.token) {
        options.headers['Authorization'] = `Bearer ${this.token}`;
      }
  
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
        return await response.json();
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${url}:`, error);
        throw error;
      }
    }
  
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    movePizzaToTop(pizza) {
      this.pizzas = this.pizzas.filter(p => p.id !== pizza.id);
      this.pizzas.unshift(pizza);
    }
  
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
    movePizzaToMainList(pizza) {
      this.favoritePizzas = this.favoritePizzas.filter(p => p.id !== pizza.id);
      this.pizzas.push(pizza);
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∏—Ü—Ü
    async fetchPizzas() {
      console.log("üîÑ –í—ã–∑–≤–∞–Ω fetchPizzas()");
      const data = await this.request('/pizzas');
      this.pizzas = data;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pizzas.length} –ø–∏—Ü—Ü`);
      return data;
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    async fetchOrders() {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      const data = await this.request('/users/orders/');
      this.orders = data;
      return data;
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    async fetchAddresses() {
      if (!this.token) return;
      const data = await this.request('/users/address/');
      this.addresses = data;
      if (!this.selectedAddress && data.length > 0) {
        this.selectedAddress = data[0];
      }
      console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:", data);
      return data;
    }
  
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    async addAddress(city, street, house, apartment, callback) {
      if (!this.token) {
        callback(false, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
        return;
      }
      const addressData = { city, street, house, apartment };
      try {
        await this.request('/users/address/', 'POST', addressData);
        console.log("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
        await this.fetchAddresses();
        callback(true, null);
      } catch (error) {
        callback(false, error.message);
      }
    }
  
    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    async deleteAddress(addressID) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      await this.request(`/users/address/${addressID}`, 'DELETE');
      this.addresses = this.addresses.filter(addr => addr.id !== addressID);
      console.log("‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!");
    }
  
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    async createOrder(orderData) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      const data = await this.request('/orders/', 'POST', orderData);
      this.currentOrder = data;
      return data;
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    async fetchAllIngredients() {
      const data = await this.request('/ingredients');
      this.ingredients = data;
      return data;
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ü—Ü
    async fetchFavoritePizzas(callback) {
      if (!this.token) {
        callback(false, "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        return;
      }
      try {
        const data = await this.request('/users/favorite-pizzas/');
        this.favoritePizzas = data;
        callback(true, null);
      } catch (error) {
        callback(false, error.message);
      }
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    async fetchDeliveryTimes() {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return await this.request('/orders/delivery-times/');
    }
  
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    async addPizzaToFavorites(pizzaID, callback) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      await this.request(`/users/favorite-pizzas/${pizzaID}`, 'POST');
      this.fetchFavoritePizzas(callback);
    }
  
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    async removePizzaFromFavorites(pizzaID, callback) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      await this.request(`/users/favorite-pizzas/${pizzaID}`, 'DELETE');
      callback(true, null);
    }
  
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async register(email, password, callback) {
      try {
        await this.request('/auth/register', 'POST', { email, password });
        this.currentUser = { id: 0, username: "", phone_number: "", email: "" };
        callback(true, null);
      } catch (error) {
        callback(false, error.message);
      }
    }
  
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserProfile({ username, phoneNumber, currentPassword, newPassword }) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      const requestBody = {};
      if (username) requestBody.username = username;
      if (phoneNumber) requestBody.phone_number = phoneNumber;
      if (newPassword) {
        requestBody.current_password = currentPassword;
        requestBody.new_password = newPassword;
      }
      const data = await this.request('/users/me', 'PATCH', requestBody);
      this.currentUser = data;
      return data;
    }
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async fetchCurrentUser(callback) {
      if (!this.token) {
        callback(new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
        return;
      }
      try {
        const data = await this.request('/users/me');
        this.currentUser = data;
        callback(null, data);
      } catch (error) {
        callback(error);
      }
    }
  
    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    async login(email, password, callback) {
      try {
        const data = await this.request('/auth/login', 'POST', { email, password });
        this.token = data.access_token;
        localStorage.setItem('authToken', this.token);
        await this.fetchCurrentUser((err, user) => {
          if (err) callback(false, err.message);
          else callback(true, null);
        });
      } catch (error) {
        callback(false, error.message);
      }
    }
  
    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout() {
      this.token = null;
      this.currentUser = null;
      localStorage.removeItem('authToken');
    }
  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    async verifyPassword(password) {
      if (!this.token) throw new Error('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      const data = await this.request('/auth/verify-password', 'POST', { password });
      return data.isValid;
    }
  }
  
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  const api = new ApiClient();
  api.fetchPizzas().then(() => console.log(api.pizzas));
  api.login('user@example.com', 'password', (success, error) => {
    console.log(success ? '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' : `–û—à–∏–±–∫–∞: ${error}`);
  });